{"ast":null,"code":"var _jsxFileName = \"/home/julypjulius/Homeworklesson9/ethers-js/src/App.js\",\n  _s = $RefreshSig$();\n// import { useState } from \"react\";\n// import { ethers } from \"ethers\";\n\n// function App() {\n//   let [text, setText] = useState(\"\");\n//   let [savedText, setSavedText] = useState(\"\");\n//   let [connected, setConnected] = useState(false);\n\n//   let { ethereum } = window;\n//   let contract = null;\n\n//   if (ethereum) {\n\n//     let abi = [\n//       \"function changeText(string)\",\n//       \"function text() view returns (string)\"\n//     ]\n//     let address = \"0x36acd8fa9eb4a86185f2c0a2483e24a5e93b5159\";\n//     let provider = new ethers.providers.Web3Provider(ethereum);\n//     let signer = provider.getSigner();\n//     contract = new ethers.Contract(address, abi, signer);\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <h1>{contract.name}</h1>\n\n//       <button onClick={() => {\n//           if (contract && !connected) {\n//               ethereum.request({ method: 'eth_requestAccounts'})\n//                   .then(accounts => {\n//                       setConnected(true);\n//                   })\n//           }\n//       }}>{!connected ? 'Connect wallet' : 'Connected' }</button>\n\n//       <form onSubmit={(e) => {\n//         e.preventDefault();\n//         if (contract && connected) {\n//           contract.changeText(text)\n//             .then(() => {\n//               setText(\"\");\n//             });\n//         }\n//       }}>\n//           <input type=\"text\" placeholder=\"Enter text\" onChange={e => setText(e.currentTarget.value)} value={text} />\n//           <input type=\"submit\" value=\"Change text\" />\n//       </form>\n\n//       <button onClick={() => {\n//         if (contract && connected) {\n//           contract.text()\n//             .then(text => {\n//               setSavedText(text);\n//             })\n//         }\n//       }}>Get text</button>\n\n//       <h3>{savedText}</h3>\n\n//       {/* <button onClick={ () => {\n//         if (contract && connected) {\n//           contract.owner\n//         }\n//       }}\n//       </button> */}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // let [text, setText] = useState(\"\");\n  // let [savedText, setSavedText] = useState(\"\");\n  let [connected, setConnected] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [symbol, setSymbol] = useState(\"\");\n  const [decimals, setDecimals] = useState(\"\");\n  const [totalSupply, setTotalSupply] = useState(\"\");\n  let {\n    ethereum\n  } = window;\n  let contract = null;\n  if (ethereum) {\n    let abi = [\"function name() public view returns (string memory)\", \"function symbol() public view returns (string memory)\", \"function decimals() public view returns (uint8)\", \"function totalSupply() public view returns (uint256)\"];\n    let address = \"0xdCd721c5Fb4f2c5e70e6e0DE3804151AC1C806b9\";\n    let provider = new ethers.providers.Web3Provider(ethereum);\n    let signer = provider.getSigner();\n    contract = new ethers.Contract(address, abi, signer);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"BadgerCoin Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (contract && !connected) {\n          ethereum.request({\n            method: \"eth_requestAccounts\"\n          }).then(accounts => {\n            setConnected(true);\n          });\n        }\n      },\n      children: !connected ? \"Connect wallet\" : \"Connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Contract Functions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (contract && connected) {\n          contract.name().then(contractName => {\n            setName(contractName);\n          });\n        }\n      },\n      children: \"Get name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (contract && connected) {\n          contract.symbol().then(sym => {\n            setSymbol(sym);\n          });\n        }\n      },\n      children: \"Get symbol\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: symbol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (contract && connected) {\n          contract.decimals().then(dec => {\n            setDecimals(dec);\n          });\n        }\n      },\n      children: \"Get decimals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: decimals\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (contract && connected) {\n          contract.totalSupply().then(supply => {\n            setTotalSupply(Number(supply));\n          });\n        }\n      },\n      children: \"Get totalSupply\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: totalSupply\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EQEa9QFzU0lCn63czQuNrSFZFtM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","ethers","jsxDEV","_jsxDEV","App","_s","connected","setConnected","name","setName","symbol","setSymbol","decimals","setDecimals","totalSupply","setTotalSupply","ethereum","window","contract","abi","address","provider","providers","Web3Provider","signer","getSigner","Contract","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","request","method","then","accounts","contractName","sym","dec","supply","Number","_c","$RefreshReg$"],"sources":["/home/julypjulius/Homeworklesson9/ethers-js/src/App.js"],"sourcesContent":["// import { useState } from \"react\";\n// import { ethers } from \"ethers\";\n \n// function App() {\n//   let [text, setText] = useState(\"\");\n//   let [savedText, setSavedText] = useState(\"\");\n//   let [connected, setConnected] = useState(false);\n \n//   let { ethereum } = window;\n//   let contract = null;\n \n//   if (ethereum) {\n \n//     let abi = [\n//       \"function changeText(string)\",\n//       \"function text() view returns (string)\"\n//     ]\n//     let address = \"0x36acd8fa9eb4a86185f2c0a2483e24a5e93b5159\";\n//     let provider = new ethers.providers.Web3Provider(ethereum);\n//     let signer = provider.getSigner();\n//     contract = new ethers.Contract(address, abi, signer);\n//   }\n \n//   return (\n//     <div className=\"App\">\n//       <h1>{contract.name}</h1>\n \n//       <button onClick={() => {\n//           if (contract && !connected) {\n//               ethereum.request({ method: 'eth_requestAccounts'})\n//                   .then(accounts => {\n//                       setConnected(true);\n//                   })\n//           }\n//       }}>{!connected ? 'Connect wallet' : 'Connected' }</button>\n \n//       <form onSubmit={(e) => {\n//         e.preventDefault();\n//         if (contract && connected) {\n//           contract.changeText(text)\n//             .then(() => {\n//               setText(\"\");\n//             });\n//         }\n//       }}>\n//           <input type=\"text\" placeholder=\"Enter text\" onChange={e => setText(e.currentTarget.value)} value={text} />\n//           <input type=\"submit\" value=\"Change text\" />\n//       </form>\n \n//       <button onClick={() => {\n//         if (contract && connected) {\n//           contract.text()\n//             .then(text => {\n//               setSavedText(text);\n//             })\n//         }\n//       }}>Get text</button>\n \n//       <h3>{savedText}</h3>\n\n//       {/* <button onClick={ () => {\n//         if (contract && connected) {\n//           contract.owner\n//         }\n//       }}\n//       </button> */}\n//     </div>\n//   );\n// }\n \n// export default App;\n\n\n\n\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nfunction App() {\n  // let [text, setText] = useState(\"\");\n  // let [savedText, setSavedText] = useState(\"\");\n  let [connected, setConnected] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [symbol, setSymbol] = useState(\"\");\n  const [decimals, setDecimals] = useState(\"\");\n  const [totalSupply, setTotalSupply] = useState(\"\");\n\n  let { ethereum } = window;\n  let contract = null;\n\n  if (ethereum) {\n    let abi = [\n      \"function name() public view returns (string memory)\",\n      \"function symbol() public view returns (string memory)\",\n      \"function decimals() public view returns (uint8)\",\n      \"function totalSupply() public view returns (uint256)\",\n    ];\n    let address = \"0xdCd721c5Fb4f2c5e70e6e0DE3804151AC1C806b9\";\n    let provider = new ethers.providers.Web3Provider(ethereum);\n    let signer = provider.getSigner();\n    contract = new ethers.Contract(address, abi, signer);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>BadgerCoin Contract</h1>\n\n      <button\n        onClick={() => {\n          if (contract && !connected) {\n            ethereum\n              .request({ method: \"eth_requestAccounts\" })\n              .then((accounts) => {\n                setConnected(true);\n              });\n          }\n        }}\n      >\n        {!connected ? \"Connect wallet\" : \"Connected\"}\n      </button>\n\n      <h2>Contract Functions</h2>\n      <button\n        onClick={() => {\n          if (contract && connected) {\n            contract.name().then((contractName) => {\n              setName(contractName);\n            });\n          }\n        }}\n      >\n        Get name\n      </button>\n\n      <h3>{name}</h3>\n\n      <button\n        onClick={() => {\n          if (contract && connected) {\n            contract.symbol().then((sym) => {\n              setSymbol(sym);\n            });\n          }\n        }}\n      >\n        Get symbol\n      </button>\n\n      <h3>{symbol}</h3>\n\n      <button\n        onClick={() => {\n          if (contract && connected) {\n            contract.decimals().then((dec) => {\n              setDecimals(dec);\n            });\n          }\n        }}\n      >\n        Get decimals\n      </button>\n\n      <h3>{decimals}</h3>\n\n      <button\n        onClick={() => {\n          if (contract && connected) {\n            contract.totalSupply().then((supply) => {\n              setTotalSupply(Number(supply));\n            });\n          }\n        }}\n      >\n        Get totalSupply\n      </button>\n\n      <h3>{totalSupply}</h3>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}